// Generated by gencpp from file quadrotor_msgs/polynomial.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_POLYNOMIAL_H
#define QUADROTOR_MSGS_MESSAGE_POLYNOMIAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct polynomial_
{
  typedef polynomial_<ContainerAllocator> Type;

  polynomial_()
    : drone_id(0)
    , traj_id(0)
    , start_time()
    , totalDuration(0.0)
    , pieceNum(0)
    , order(0)
    , Duration()
    , Xcoeff()
    , Ycoeff()
    , Zcoeff()
    , captured(false)  {
    }
  polynomial_(const ContainerAllocator& _alloc)
    : drone_id(0)
    , traj_id(0)
    , start_time()
    , totalDuration(0.0)
    , pieceNum(0)
    , order(0)
    , Duration(_alloc)
    , Xcoeff(_alloc)
    , Ycoeff(_alloc)
    , Zcoeff(_alloc)
    , captured(false)  {
  (void)_alloc;
    }



   typedef int16_t _drone_id_type;
  _drone_id_type drone_id;

   typedef int32_t _traj_id_type;
  _traj_id_type traj_id;

   typedef ros::Time _start_time_type;
  _start_time_type start_time;

   typedef double _totalDuration_type;
  _totalDuration_type totalDuration;

   typedef int16_t _pieceNum_type;
  _pieceNum_type pieceNum;

   typedef uint8_t _order_type;
  _order_type order;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _Duration_type;
  _Duration_type Duration;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _Xcoeff_type;
  _Xcoeff_type Xcoeff;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _Ycoeff_type;
  _Ycoeff_type Ycoeff;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _Zcoeff_type;
  _Zcoeff_type Zcoeff;

   typedef uint8_t _captured_type;
  _captured_type captured;





  typedef boost::shared_ptr< ::quadrotor_msgs::polynomial_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::polynomial_<ContainerAllocator> const> ConstPtr;

}; // struct polynomial_

typedef ::quadrotor_msgs::polynomial_<std::allocator<void> > polynomial;

typedef boost::shared_ptr< ::quadrotor_msgs::polynomial > polynomialPtr;
typedef boost::shared_ptr< ::quadrotor_msgs::polynomial const> polynomialConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::polynomial_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::polynomial_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::polynomial_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::polynomial_<ContainerAllocator2> & rhs)
{
  return lhs.drone_id == rhs.drone_id &&
    lhs.traj_id == rhs.traj_id &&
    lhs.start_time == rhs.start_time &&
    lhs.totalDuration == rhs.totalDuration &&
    lhs.pieceNum == rhs.pieceNum &&
    lhs.order == rhs.order &&
    lhs.Duration == rhs.Duration &&
    lhs.Xcoeff == rhs.Xcoeff &&
    lhs.Ycoeff == rhs.Ycoeff &&
    lhs.Zcoeff == rhs.Zcoeff &&
    lhs.captured == rhs.captured;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::polynomial_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::polynomial_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::polynomial_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::polynomial_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::polynomial_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::polynomial_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::polynomial_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::polynomial_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::polynomial_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fc5028b9e68e7966d83027aa556694ff";
  }

  static const char* value(const ::quadrotor_msgs::polynomial_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfc5028b9e68e7966ULL;
  static const uint64_t static_value2 = 0xd83027aa556694ffULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::polynomial_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/polynomial";
  }

  static const char* value(const ::quadrotor_msgs::polynomial_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::polynomial_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 drone_id\n"
"int32 traj_id\n"
"time start_time\n"
"float64 totalDuration\n"
"int16 pieceNum\n"
"uint8 order\n"
"float64[] Duration\n"
"float64[] Xcoeff\n"
"float64[] Ycoeff\n"
"float64[] Zcoeff\n"
"bool captured\n"
;
  }

  static const char* value(const ::quadrotor_msgs::polynomial_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::polynomial_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.drone_id);
      stream.next(m.traj_id);
      stream.next(m.start_time);
      stream.next(m.totalDuration);
      stream.next(m.pieceNum);
      stream.next(m.order);
      stream.next(m.Duration);
      stream.next(m.Xcoeff);
      stream.next(m.Ycoeff);
      stream.next(m.Zcoeff);
      stream.next(m.captured);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct polynomial_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::polynomial_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::polynomial_<ContainerAllocator>& v)
  {
    s << indent << "drone_id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.drone_id);
    s << indent << "traj_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.traj_id);
    s << indent << "start_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.start_time);
    s << indent << "totalDuration: ";
    Printer<double>::stream(s, indent + "  ", v.totalDuration);
    s << indent << "pieceNum: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pieceNum);
    s << indent << "order: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.order);
    s << indent << "Duration[]" << std::endl;
    for (size_t i = 0; i < v.Duration.size(); ++i)
    {
      s << indent << "  Duration[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Duration[i]);
    }
    s << indent << "Xcoeff[]" << std::endl;
    for (size_t i = 0; i < v.Xcoeff.size(); ++i)
    {
      s << indent << "  Xcoeff[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Xcoeff[i]);
    }
    s << indent << "Ycoeff[]" << std::endl;
    for (size_t i = 0; i < v.Ycoeff.size(); ++i)
    {
      s << indent << "  Ycoeff[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Ycoeff[i]);
    }
    s << indent << "Zcoeff[]" << std::endl;
    for (size_t i = 0; i < v.Zcoeff.size(); ++i)
    {
      s << indent << "  Zcoeff[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Zcoeff[i]);
    }
    s << indent << "captured: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.captured);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_POLYNOMIAL_H
